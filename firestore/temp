const express = require("express")
const register = require("./register")
const blogs = require("./blogs")
const bodyParser = require("body-parser");

require("dotenv").config()

const cors = require('cors');

const app = express();

app.use(cors())

app.use(express.static("./public/"))

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

port = process.env.PORT || 3000

app.listen(3000, function (req, res) {
    console.log("server started on port " + port);
})

// multer starts
const path = require("path")
const multer = require("multer")

const storage = multer.diskStorage({
    destination: "./public/uploads/",
    filename: function (req, file, cb) {
        cb(null, file.fieldname + "-" + Date.now() + path.extname(file.originalname))
    }
})

const upload = multer({
    storage: storage,
    limits: { fileSize: 10000000 },
    fileFilter: function (req, file, cb) {
        const fileTypes = /jpeg|jpg|png|gif/
        let typeCheck = fileTypes.test(path.extname(file.originalname).toLocaleLowerCase())
        let mimeCheck = fileTypes.test(file.mimetype)
        if (typeCheck && mimeCheck) {
            cb(null, true)
        }
        else {
            cb("image only (invalid type)")
        }
    }
}).single("image")


function file_middleware(req, res, next) {
    upload(req, res, (err) => {
        if (err)
            res.status(500).json({
                success: false,
                message: err
            })
        else
            next();
    })

}
//end 

// firebase authentication start

const firebase = require("firebase/app");
require("firebase/auth");
require("firebase/firestore");

const firebaseConfig = require("./firebaseConfig.json");
firebase.initializeApp(firebaseConfig)
console.log("run............")

const admin = require('firebase-admin');
const serviceAccount = require('./serviceAccountKey.json');


admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

//end

function auth(req, res, next) {
    const user = firebase.auth().currentUser;
    if (user) {
        res.status(400).send("failed")
    } else {
        next()
    }
}

function getCurrentUser() {
    const user = firebase.auth().currentUser;
    return user
}

async function createUser(email, password, name) {
    let userCredentials = await firebase.auth().createUserWithEmailAndPassword(email, password)
    let user = userCredentials.user
    await firebase.auth().currentUser.updateProfile({
        displayName: name,
        photoURL: ""
    });
    return user
}

app.post("/signup", function (req, res) {
    let email = req.body.email
    let password = req.body.password
    let name = req.body.name
    createUser(email, password, name).catch(console.log).then(user => res.send(user))
})


app.post("/signin", auth, function (req, res) {
    let email = req.body.email
    let password = req.body.password
    firebase.auth().signInWithEmailAndPassword(email, password)
        .then((userCredential) => {
            var user = userCredential.user;
            res.send(user)
        })
        .catch((error) => {
            var errorCode = error.code;
            var errorMessage = error.message;
            console.log("signin", error)
            res.status(400).send("failed")

        });
})


app.get("/signout", function (req, res) {
    firebase.auth().signOut().then(() => {
        // Sign-out successful.
        console.log("signout")
        res.send("signout")

    }).catch((error) => {
        console.log("signout", error)
        res.send("signout error")

    });
})


let id = 0
async function insert(title, body, image) {
    /*  const user = firebase.auth().currentUser;
      const docRef = db.collection('blogs').doc(`user.uid`);
      await docRef.set({
          name: user.displayName,
          title,
          body,
          image
      });
      */
    let user = getCurrentUser()
    const docRef = db.collection('blogs').doc(`${user.uid}`);
    const doc = await docRef.get();
    if (!doc.exists) {
        await docRef.set({
            name: user.displayName,
            id: id++,
            blogArr: [{
                title,
                body,
                image
            }]
        });
    } else {
        const blogRes = await docRef.update({
            blogArr: admin.firestore.FieldValue.arrayUnion({
                title,
                body,
                image
            })
        });
    }

}

async function getAllBlogs() {
    const snapshot = await db.collection('blogs').get();
    let blogs = []
    snapshot.forEach((doc) => {
        //      console.log(doc.id, '=>', doc.data());
        blogs.push(doc.data())
    });
    return blogs
}

async function getBlogs() {
    let uid = getCurrentUser().uid
    const blogs = await db.collection('blogs').doc(`${uid}`).get();
    return blogs.data()
}

app.get("/blogs", function (req, res) {
    getAllBlogs().then(data => res.send(data))
})

app.post("/blogs/insert", file_middleware, function (req, res) {
    let title = req.body.title
    let body = req.body.body
    let image = req.file.filename
    insert(title, body, image)
    res.send("record inserted")
})

app.get("/blogs/blog", function (req, res) {
    getBlogs().then(data => res.send(data))
})
